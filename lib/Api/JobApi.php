<?php
/**
 * JobApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Авито API для бизнеса
 *
 * # Общая информация Описание API произведено в формате [**Swagger 3.0**](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md). Вы можете использовать данный файл для ознакомления с методами API, а также для генерации базового кода для работы с API на удобном для вас языке программирования с помощью утилиты [**Swagger Codegen**](https://swagger.io/swagger-codegen/) или online сервиса [**Swagger Editor**](https://editor.swagger.io/).  **Авито API для бизнеса предоставляется согласно [Условиям использования](https://api.avito.ru/docs/public/APITermsOfServiceV1.pdf).**  По всем вопросам работы с API необходимо обращаться в Службу Поддержки профессиональных инструментов:  <li>телефон: <b>+7 495 777-10-66</b></li> <li>email: <a href=\"mailto:supportautoload@avito.ru\">supportautoload@avito.ru</a></li>  # Типы авторизации Для использования данного API запрос должен быть авторизован. В данный момент API Авито использует следующие механизмы авторизации.  <!-- ReDoc-Inject: <security-definitions> -->  Подробнее о каждом механизме и его назначении можно прочитать в соответствующем разделе.
 *
 * OpenAPI spec version: 1
 * Contact: supportautoload@avito.ru
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.23
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * JobApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class JobApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getNegotiations
     *
     * Получение списка откликов
     *
     * @param  string $authorization Токен для авторизации (required)
     * @param  int $per_page Количество записей на странице (целое число больше 0 и меньше 21) (optional, default to 20)
     * @param  int $page Номер страницы (целое число больше 0) (optional, default to 1)
     * @param  int $cursor Курсор поиска, возвращается в ответе первого запроса и если не указан, то страница всегда начинается с первой (optional)
     * @param  int $vacancy_id Идентификатор вакансии. Опциональный фильтр (optional)
     * @param  Bool $resume_photos признак того, нужно ли отдавать картинки резюме, по умолчанию false (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\NegotiationList
     */
    public function getNegotiations($authorization, $per_page = '20', $page = '1', $cursor = null, $vacancy_id = null, $resume_photos = null)
    {
        list($response) = $this->getNegotiationsWithHttpInfo($authorization, $per_page, $page, $cursor, $vacancy_id, $resume_photos);
        return $response;
    }

    /**
     * Operation getNegotiationsWithHttpInfo
     *
     * Получение списка откликов
     *
     * @param  string $authorization Токен для авторизации (required)
     * @param  int $per_page Количество записей на странице (целое число больше 0 и меньше 21) (optional, default to 20)
     * @param  int $page Номер страницы (целое число больше 0) (optional, default to 1)
     * @param  int $cursor Курсор поиска, возвращается в ответе первого запроса и если не указан, то страница всегда начинается с первой (optional)
     * @param  int $vacancy_id Идентификатор вакансии. Опциональный фильтр (optional)
     * @param  Bool $resume_photos признак того, нужно ли отдавать картинки резюме, по умолчанию false (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\NegotiationList, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNegotiationsWithHttpInfo($authorization, $per_page = '20', $page = '1', $cursor = null, $vacancy_id = null, $resume_photos = null)
    {
        $returnType = '\Swagger\Client\Model\NegotiationList';
        $request = $this->getNegotiationsRequest($authorization, $per_page, $page, $cursor, $vacancy_id, $resume_photos);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\NegotiationList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\BadRequestError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\AuthError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ServiceError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ServiceUnavailableError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNegotiationsAsync
     *
     * Получение списка откликов
     *
     * @param  string $authorization Токен для авторизации (required)
     * @param  int $per_page Количество записей на странице (целое число больше 0 и меньше 21) (optional, default to 20)
     * @param  int $page Номер страницы (целое число больше 0) (optional, default to 1)
     * @param  int $cursor Курсор поиска, возвращается в ответе первого запроса и если не указан, то страница всегда начинается с первой (optional)
     * @param  int $vacancy_id Идентификатор вакансии. Опциональный фильтр (optional)
     * @param  Bool $resume_photos признак того, нужно ли отдавать картинки резюме, по умолчанию false (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNegotiationsAsync($authorization, $per_page = '20', $page = '1', $cursor = null, $vacancy_id = null, $resume_photos = null)
    {
        return $this->getNegotiationsAsyncWithHttpInfo($authorization, $per_page, $page, $cursor, $vacancy_id, $resume_photos)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNegotiationsAsyncWithHttpInfo
     *
     * Получение списка откликов
     *
     * @param  string $authorization Токен для авторизации (required)
     * @param  int $per_page Количество записей на странице (целое число больше 0 и меньше 21) (optional, default to 20)
     * @param  int $page Номер страницы (целое число больше 0) (optional, default to 1)
     * @param  int $cursor Курсор поиска, возвращается в ответе первого запроса и если не указан, то страница всегда начинается с первой (optional)
     * @param  int $vacancy_id Идентификатор вакансии. Опциональный фильтр (optional)
     * @param  Bool $resume_photos признак того, нужно ли отдавать картинки резюме, по умолчанию false (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNegotiationsAsyncWithHttpInfo($authorization, $per_page = '20', $page = '1', $cursor = null, $vacancy_id = null, $resume_photos = null)
    {
        $returnType = '\Swagger\Client\Model\NegotiationList';
        $request = $this->getNegotiationsRequest($authorization, $per_page, $page, $cursor, $vacancy_id, $resume_photos);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNegotiations'
     *
     * @param  string $authorization Токен для авторизации (required)
     * @param  int $per_page Количество записей на странице (целое число больше 0 и меньше 21) (optional, default to 20)
     * @param  int $page Номер страницы (целое число больше 0) (optional, default to 1)
     * @param  int $cursor Курсор поиска, возвращается в ответе первого запроса и если не указан, то страница всегда начинается с первой (optional)
     * @param  int $vacancy_id Идентификатор вакансии. Опциональный фильтр (optional)
     * @param  Bool $resume_photos признак того, нужно ли отдавать картинки резюме, по умолчанию false (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getNegotiationsRequest($authorization, $per_page = '20', $page = '1', $cursor = null, $vacancy_id = null, $resume_photos = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling getNegotiations'
            );
        }

        $resourcePath = '/job/v1/negotiations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($per_page !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($per_page, 'int32');
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page, 'int32');
        }
        // query params
        if ($cursor !== null) {
            $queryParams['cursor'] = ObjectSerializer::toQueryValue($cursor, 'int64');
        }
        // query params
        if ($vacancy_id !== null) {
            $queryParams['vacancy_id'] = ObjectSerializer::toQueryValue($vacancy_id, 'int64');
        }
        // query params
        if ($resume_photos !== null) {
            $queryParams['resume_photos'] = ObjectSerializer::toQueryValue($resume_photos, null);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNegotiationsByChatID
     *
     * Получение отклика по идентификатору чата
     *
     * @param  string $authorization Токен для авторизации (required)
     * @param  string $chat_id Идентификатор чата (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Negotiation
     */
    public function getNegotiationsByChatID($authorization, $chat_id)
    {
        list($response) = $this->getNegotiationsByChatIDWithHttpInfo($authorization, $chat_id);
        return $response;
    }

    /**
     * Operation getNegotiationsByChatIDWithHttpInfo
     *
     * Получение отклика по идентификатору чата
     *
     * @param  string $authorization Токен для авторизации (required)
     * @param  string $chat_id Идентификатор чата (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Negotiation, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNegotiationsByChatIDWithHttpInfo($authorization, $chat_id)
    {
        $returnType = '\Swagger\Client\Model\Negotiation';
        $request = $this->getNegotiationsByChatIDRequest($authorization, $chat_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Negotiation',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\BadRequestError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\AuthError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ForbiddenError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\NotFoundError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ServiceError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ServiceUnavailableError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNegotiationsByChatIDAsync
     *
     * Получение отклика по идентификатору чата
     *
     * @param  string $authorization Токен для авторизации (required)
     * @param  string $chat_id Идентификатор чата (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNegotiationsByChatIDAsync($authorization, $chat_id)
    {
        return $this->getNegotiationsByChatIDAsyncWithHttpInfo($authorization, $chat_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNegotiationsByChatIDAsyncWithHttpInfo
     *
     * Получение отклика по идентификатору чата
     *
     * @param  string $authorization Токен для авторизации (required)
     * @param  string $chat_id Идентификатор чата (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNegotiationsByChatIDAsyncWithHttpInfo($authorization, $chat_id)
    {
        $returnType = '\Swagger\Client\Model\Negotiation';
        $request = $this->getNegotiationsByChatIDRequest($authorization, $chat_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNegotiationsByChatID'
     *
     * @param  string $authorization Токен для авторизации (required)
     * @param  string $chat_id Идентификатор чата (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getNegotiationsByChatIDRequest($authorization, $chat_id)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling getNegotiationsByChatID'
            );
        }
        // verify the required parameter 'chat_id' is set
        if ($chat_id === null || (is_array($chat_id) && count($chat_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $chat_id when calling getNegotiationsByChatID'
            );
        }

        $resourcePath = '/job/v1/negotiations/by-chat-id/{chat_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($chat_id !== null) {
            $resourcePath = str_replace(
                '{' . 'chat_id' . '}',
                ObjectSerializer::toPathValue($chat_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNegotiationsByID
     *
     * Получение отклика по его идентификатору
     *
     * @param  string $authorization Токен для авторизации (required)
     * @param  int $negotiation_id Идентификатор отклика (required)
     * @param  Bool $resume_photos признак того, нужно ли отдавать картинки резюме, по умолчанию false (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Negotiation
     */
    public function getNegotiationsByID($authorization, $negotiation_id, $resume_photos = null)
    {
        list($response) = $this->getNegotiationsByIDWithHttpInfo($authorization, $negotiation_id, $resume_photos);
        return $response;
    }

    /**
     * Operation getNegotiationsByIDWithHttpInfo
     *
     * Получение отклика по его идентификатору
     *
     * @param  string $authorization Токен для авторизации (required)
     * @param  int $negotiation_id Идентификатор отклика (required)
     * @param  Bool $resume_photos признак того, нужно ли отдавать картинки резюме, по умолчанию false (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Negotiation, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNegotiationsByIDWithHttpInfo($authorization, $negotiation_id, $resume_photos = null)
    {
        $returnType = '\Swagger\Client\Model\Negotiation';
        $request = $this->getNegotiationsByIDRequest($authorization, $negotiation_id, $resume_photos);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Negotiation',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\BadRequestError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\AuthError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ForbiddenError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\NotFoundError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ServiceError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ServiceUnavailableError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNegotiationsByIDAsync
     *
     * Получение отклика по его идентификатору
     *
     * @param  string $authorization Токен для авторизации (required)
     * @param  int $negotiation_id Идентификатор отклика (required)
     * @param  Bool $resume_photos признак того, нужно ли отдавать картинки резюме, по умолчанию false (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNegotiationsByIDAsync($authorization, $negotiation_id, $resume_photos = null)
    {
        return $this->getNegotiationsByIDAsyncWithHttpInfo($authorization, $negotiation_id, $resume_photos)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNegotiationsByIDAsyncWithHttpInfo
     *
     * Получение отклика по его идентификатору
     *
     * @param  string $authorization Токен для авторизации (required)
     * @param  int $negotiation_id Идентификатор отклика (required)
     * @param  Bool $resume_photos признак того, нужно ли отдавать картинки резюме, по умолчанию false (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNegotiationsByIDAsyncWithHttpInfo($authorization, $negotiation_id, $resume_photos = null)
    {
        $returnType = '\Swagger\Client\Model\Negotiation';
        $request = $this->getNegotiationsByIDRequest($authorization, $negotiation_id, $resume_photos);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNegotiationsByID'
     *
     * @param  string $authorization Токен для авторизации (required)
     * @param  int $negotiation_id Идентификатор отклика (required)
     * @param  Bool $resume_photos признак того, нужно ли отдавать картинки резюме, по умолчанию false (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getNegotiationsByIDRequest($authorization, $negotiation_id, $resume_photos = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling getNegotiationsByID'
            );
        }
        // verify the required parameter 'negotiation_id' is set
        if ($negotiation_id === null || (is_array($negotiation_id) && count($negotiation_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $negotiation_id when calling getNegotiationsByID'
            );
        }

        $resourcePath = '/job/v1/negotiations/{negotiation_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($resume_photos !== null) {
            $queryParams['resume_photos'] = ObjectSerializer::toQueryValue($resume_photos, null);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($negotiation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'negotiation_id' . '}',
                ObjectSerializer::toPathValue($negotiation_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getResume
     *
     * Просмотр резюме
     *
     * @param  string $authorization Токен для авторизации (required)
     * @param  int $resume_id Идентификатор резюме (required)
     * @param  string $fields Поля ответа (можно указать несколько значений через запятую) (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Resume
     */
    public function getResume($authorization, $resume_id, $fields = null)
    {
        list($response) = $this->getResumeWithHttpInfo($authorization, $resume_id, $fields);
        return $response;
    }

    /**
     * Operation getResumeWithHttpInfo
     *
     * Просмотр резюме
     *
     * @param  string $authorization Токен для авторизации (required)
     * @param  int $resume_id Идентификатор резюме (required)
     * @param  string $fields Поля ответа (можно указать несколько значений через запятую) (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Resume, HTTP status code, HTTP response headers (array of strings)
     */
    public function getResumeWithHttpInfo($authorization, $resume_id, $fields = null)
    {
        $returnType = '\Swagger\Client\Model\Resume';
        $request = $this->getResumeRequest($authorization, $resume_id, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Resume',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ValidatingError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\AuthError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\NotFoundError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ServiceError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ServiceUnavailableError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getResumeAsync
     *
     * Просмотр резюме
     *
     * @param  string $authorization Токен для авторизации (required)
     * @param  int $resume_id Идентификатор резюме (required)
     * @param  string $fields Поля ответа (можно указать несколько значений через запятую) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getResumeAsync($authorization, $resume_id, $fields = null)
    {
        return $this->getResumeAsyncWithHttpInfo($authorization, $resume_id, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getResumeAsyncWithHttpInfo
     *
     * Просмотр резюме
     *
     * @param  string $authorization Токен для авторизации (required)
     * @param  int $resume_id Идентификатор резюме (required)
     * @param  string $fields Поля ответа (можно указать несколько значений через запятую) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getResumeAsyncWithHttpInfo($authorization, $resume_id, $fields = null)
    {
        $returnType = '\Swagger\Client\Model\Resume';
        $request = $this->getResumeRequest($authorization, $resume_id, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getResume'
     *
     * @param  string $authorization Токен для авторизации (required)
     * @param  int $resume_id Идентификатор резюме (required)
     * @param  string $fields Поля ответа (можно указать несколько значений через запятую) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getResumeRequest($authorization, $resume_id, $fields = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling getResume'
            );
        }
        // verify the required parameter 'resume_id' is set
        if ($resume_id === null || (is_array($resume_id) && count($resume_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $resume_id when calling getResume'
            );
        }

        $resourcePath = '/job/v1/resumes/{resume_id}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields, null);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($resume_id !== null) {
            $resourcePath = str_replace(
                '{' . 'resume_id' . '}',
                ObjectSerializer::toPathValue($resume_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getResume20
     *
     * Просмотр резюме v2.0
     *
     * @param  string $authorization Токен для авторизации (required)
     * @param  int $resume_id Идентификатор резюме (required)
     * @param  string $fields Поля основного тела ответа (можно указать несколько значений через запятую). По умолчанию отображаются все поля. (optional)
     * @param  string $params Дополнительные поля, которые входят в params (можно указать несколько значений через запятую). По умолчанию отображаются все поля. (optional)
     * @param  Bool $photos Признак того, нужно ли отдавать картинки, по умолчанию false (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Resume20
     */
    public function getResume20($authorization, $resume_id, $fields = null, $params = null, $photos = null)
    {
        list($response) = $this->getResume20WithHttpInfo($authorization, $resume_id, $fields, $params, $photos);
        return $response;
    }

    /**
     * Operation getResume20WithHttpInfo
     *
     * Просмотр резюме v2.0
     *
     * @param  string $authorization Токен для авторизации (required)
     * @param  int $resume_id Идентификатор резюме (required)
     * @param  string $fields Поля основного тела ответа (можно указать несколько значений через запятую). По умолчанию отображаются все поля. (optional)
     * @param  string $params Дополнительные поля, которые входят в params (можно указать несколько значений через запятую). По умолчанию отображаются все поля. (optional)
     * @param  Bool $photos Признак того, нужно ли отдавать картинки, по умолчанию false (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Resume20, HTTP status code, HTTP response headers (array of strings)
     */
    public function getResume20WithHttpInfo($authorization, $resume_id, $fields = null, $params = null, $photos = null)
    {
        $returnType = '\Swagger\Client\Model\Resume20';
        $request = $this->getResume20Request($authorization, $resume_id, $fields, $params, $photos);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Resume20',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\BadRequestError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\AuthError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\NotFoundError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ServiceError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ServiceUnavailableError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getResume20Async
     *
     * Просмотр резюме v2.0
     *
     * @param  string $authorization Токен для авторизации (required)
     * @param  int $resume_id Идентификатор резюме (required)
     * @param  string $fields Поля основного тела ответа (можно указать несколько значений через запятую). По умолчанию отображаются все поля. (optional)
     * @param  string $params Дополнительные поля, которые входят в params (можно указать несколько значений через запятую). По умолчанию отображаются все поля. (optional)
     * @param  Bool $photos Признак того, нужно ли отдавать картинки, по умолчанию false (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getResume20Async($authorization, $resume_id, $fields = null, $params = null, $photos = null)
    {
        return $this->getResume20AsyncWithHttpInfo($authorization, $resume_id, $fields, $params, $photos)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getResume20AsyncWithHttpInfo
     *
     * Просмотр резюме v2.0
     *
     * @param  string $authorization Токен для авторизации (required)
     * @param  int $resume_id Идентификатор резюме (required)
     * @param  string $fields Поля основного тела ответа (можно указать несколько значений через запятую). По умолчанию отображаются все поля. (optional)
     * @param  string $params Дополнительные поля, которые входят в params (можно указать несколько значений через запятую). По умолчанию отображаются все поля. (optional)
     * @param  Bool $photos Признак того, нужно ли отдавать картинки, по умолчанию false (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getResume20AsyncWithHttpInfo($authorization, $resume_id, $fields = null, $params = null, $photos = null)
    {
        $returnType = '\Swagger\Client\Model\Resume20';
        $request = $this->getResume20Request($authorization, $resume_id, $fields, $params, $photos);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getResume20'
     *
     * @param  string $authorization Токен для авторизации (required)
     * @param  int $resume_id Идентификатор резюме (required)
     * @param  string $fields Поля основного тела ответа (можно указать несколько значений через запятую). По умолчанию отображаются все поля. (optional)
     * @param  string $params Дополнительные поля, которые входят в params (можно указать несколько значений через запятую). По умолчанию отображаются все поля. (optional)
     * @param  Bool $photos Признак того, нужно ли отдавать картинки, по умолчанию false (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getResume20Request($authorization, $resume_id, $fields = null, $params = null, $photos = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling getResume20'
            );
        }
        // verify the required parameter 'resume_id' is set
        if ($resume_id === null || (is_array($resume_id) && count($resume_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $resume_id when calling getResume20'
            );
        }

        $resourcePath = '/job/v2/resumes/{resume_id}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields, null);
        }
        // query params
        if ($params !== null) {
            $queryParams['params'] = ObjectSerializer::toQueryValue($params, null);
        }
        // query params
        if ($photos !== null) {
            $queryParams['photos'] = ObjectSerializer::toQueryValue($photos, null);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($resume_id !== null) {
            $resourcePath = str_replace(
                '{' . 'resume_id' . '}',
                ObjectSerializer::toPathValue($resume_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getResumeContacts
     *
     * Доступ к контактным данным соискателя
     *
     * @param  string $authorization Токен для авторизации (required)
     * @param  int $resume_id Идентификатор резюме (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResumeContacts
     */
    public function getResumeContacts($authorization, $resume_id)
    {
        list($response) = $this->getResumeContactsWithHttpInfo($authorization, $resume_id);
        return $response;
    }

    /**
     * Operation getResumeContactsWithHttpInfo
     *
     * Доступ к контактным данным соискателя
     *
     * @param  string $authorization Токен для авторизации (required)
     * @param  int $resume_id Идентификатор резюме (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResumeContacts, HTTP status code, HTTP response headers (array of strings)
     */
    public function getResumeContactsWithHttpInfo($authorization, $resume_id)
    {
        $returnType = '\Swagger\Client\Model\ResumeContacts';
        $request = $this->getResumeContactsRequest($authorization, $resume_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResumeContacts',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ValidatingError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\AuthError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PurchasingError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\NotFoundError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ServiceError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ServiceUnavailableError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getResumeContactsAsync
     *
     * Доступ к контактным данным соискателя
     *
     * @param  string $authorization Токен для авторизации (required)
     * @param  int $resume_id Идентификатор резюме (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getResumeContactsAsync($authorization, $resume_id)
    {
        return $this->getResumeContactsAsyncWithHttpInfo($authorization, $resume_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getResumeContactsAsyncWithHttpInfo
     *
     * Доступ к контактным данным соискателя
     *
     * @param  string $authorization Токен для авторизации (required)
     * @param  int $resume_id Идентификатор резюме (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getResumeContactsAsyncWithHttpInfo($authorization, $resume_id)
    {
        $returnType = '\Swagger\Client\Model\ResumeContacts';
        $request = $this->getResumeContactsRequest($authorization, $resume_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getResumeContacts'
     *
     * @param  string $authorization Токен для авторизации (required)
     * @param  int $resume_id Идентификатор резюме (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getResumeContactsRequest($authorization, $resume_id)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling getResumeContacts'
            );
        }
        // verify the required parameter 'resume_id' is set
        if ($resume_id === null || (is_array($resume_id) && count($resume_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $resume_id when calling getResumeContacts'
            );
        }

        $resourcePath = '/job/v1/resumes/{resume_id}/contacts/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($resume_id !== null) {
            $resourcePath = str_replace(
                '{' . 'resume_id' . '}',
                ObjectSerializer::toPathValue($resume_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getResumes
     *
     * Поиск резюме
     *
     * @param  string $authorization Токен для авторизации (required)
     * @param  int $per_page Количество записей на странице (положительное число больше 0 и меньше 100) (optional, default to 25)
     * @param  int $page Номер страницы (положительное число больше 0) (optional, default to 1)
     * @param  int $cursor Курсор поиска (если не указан, будет начат новый поиск и его курсор будет возвращен в ответе) (optional)
     * @param  string $fields Поля ответа (можно указать несколько значений через запятую) (optional)
     * @param  string $query Поисковая фраза (optional)
     * @param  int $location Идентификатор региона поиска (можно указать несколько значений через запятую) &lt;br&gt; Метод принимает идентификаторы сущностей Region и City из [справочника](http://autoload.avito.ru/format/Locations.xml). (optional)
     * @param  int $specialization Идентификатор сферы деятельности (можно указать несколько значений через запятую) &lt;br&gt; Возможные значения: - 10166 - IT, интернет, телеком - 10167 - Медицина, фармацевтика - 10168 - Продажи - 10169 - Страхование - 10170 - Транспорт, логистика - 10171 - Образование, наука - 10172 - Строительство - 10173 - Туризм, рестораны - 10174 - Фитнес, салоны красоты - 10175 - Без опыта, студенты - 10180 - Автомобильный бизнес - 10181 - Бухгалтерия, финансы - 10182 - Высший менеджмент - 10183 - Госслужба, НКО - 10184 - ЖКХ, эксплуатация - 10185 - Искусство, развлечения - 10186 - Консультирование - 10187 - Маркетинг, реклама, PR - 10188 - Охрана, безопасность - 10189 - Управление персоналом - 10190 - Юриспруденция - 10191 - Административная работа - 10192 - Банки, инвестиции - 10193 - Производство, сырьё, с/х - 16844 - Домашний персонал (optional)
     * @param  string $schedule График работы (можно указать несколько значений через запятую) &lt;br&gt; Возможные значения: - partial-day - Неполный рабочий день - full-day - Полный рабочий день - fly-in-fly-out - Вахтовый метод - flexible - Гибкий график - shift - Сменный график - remote - Удаленная работа (optional)
     * @param  string $business_trip_readiness Готовность к командировкам (можно указать несколько значений через запятую) &lt;br&gt; Возможные значения: - ready - Готов - never - Не готов - sometimes - Иногда (optional)
     * @param  string $relocation_readiness Готовность к переезду (можно указать несколько значений через запятую) &lt;br&gt; Возможные значения: - possible - Возможен - never - Невозможен (optional)
     * @param  string $gender Пол (можно указать несколько значений через запятую) &lt;br&gt; Возможные значения: - female - Женщина - male - Мужчина (optional)
     * @param  int $age_min Минимальный возраст (включительно, положительное число от 18 до 99) (optional, default to 18)
     * @param  int $age_max Максимальный возраст (включительно, положительное число от 18 до 99) (optional, default to 99)
     * @param  string $education_level Уровень образования (можно указать несколько значений через запятую) &lt;br&gt; Возможные значения: - higher - Высшее - unfinished-higher - Неоконченное высшее - secondary - Среднее - special-secondary - Среднее специальное (optional)
     * @param  int $experience_min Минимальный стаж работы (включительно, положительное число от 0 до 50) (optional, default to 0)
     * @param  int $experience_max Максимальный стаж работы (включительно, положительное число от 0 до 50) (optional, default to 50)
     * @param  int $salary_min Минимальный размер заработной платы (включительно, положительное число) (optional, default to 0)
     * @param  int $salary_max Максимальный размер заработной платы (включительно, положительное число) (optional)
     * @param  \DateTime $updated_than Дата последнего обновления (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\_
     */
    public function getResumes($authorization, $per_page = '25', $page = '1', $cursor = null, $fields = null, $query = null, $location = null, $specialization = null, $schedule = null, $business_trip_readiness = null, $relocation_readiness = null, $gender = null, $age_min = '18', $age_max = '99', $education_level = null, $experience_min = '0', $experience_max = '50', $salary_min = '0', $salary_max = null, $updated_than = null)
    {
        list($response) = $this->getResumesWithHttpInfo($authorization, $per_page, $page, $cursor, $fields, $query, $location, $specialization, $schedule, $business_trip_readiness, $relocation_readiness, $gender, $age_min, $age_max, $education_level, $experience_min, $experience_max, $salary_min, $salary_max, $updated_than);
        return $response;
    }

    /**
     * Operation getResumesWithHttpInfo
     *
     * Поиск резюме
     *
     * @param  string $authorization Токен для авторизации (required)
     * @param  int $per_page Количество записей на странице (положительное число больше 0 и меньше 100) (optional, default to 25)
     * @param  int $page Номер страницы (положительное число больше 0) (optional, default to 1)
     * @param  int $cursor Курсор поиска (если не указан, будет начат новый поиск и его курсор будет возвращен в ответе) (optional)
     * @param  string $fields Поля ответа (можно указать несколько значений через запятую) (optional)
     * @param  string $query Поисковая фраза (optional)
     * @param  int $location Идентификатор региона поиска (можно указать несколько значений через запятую) &lt;br&gt; Метод принимает идентификаторы сущностей Region и City из [справочника](http://autoload.avito.ru/format/Locations.xml). (optional)
     * @param  int $specialization Идентификатор сферы деятельности (можно указать несколько значений через запятую) &lt;br&gt; Возможные значения: - 10166 - IT, интернет, телеком - 10167 - Медицина, фармацевтика - 10168 - Продажи - 10169 - Страхование - 10170 - Транспорт, логистика - 10171 - Образование, наука - 10172 - Строительство - 10173 - Туризм, рестораны - 10174 - Фитнес, салоны красоты - 10175 - Без опыта, студенты - 10180 - Автомобильный бизнес - 10181 - Бухгалтерия, финансы - 10182 - Высший менеджмент - 10183 - Госслужба, НКО - 10184 - ЖКХ, эксплуатация - 10185 - Искусство, развлечения - 10186 - Консультирование - 10187 - Маркетинг, реклама, PR - 10188 - Охрана, безопасность - 10189 - Управление персоналом - 10190 - Юриспруденция - 10191 - Административная работа - 10192 - Банки, инвестиции - 10193 - Производство, сырьё, с/х - 16844 - Домашний персонал (optional)
     * @param  string $schedule График работы (можно указать несколько значений через запятую) &lt;br&gt; Возможные значения: - partial-day - Неполный рабочий день - full-day - Полный рабочий день - fly-in-fly-out - Вахтовый метод - flexible - Гибкий график - shift - Сменный график - remote - Удаленная работа (optional)
     * @param  string $business_trip_readiness Готовность к командировкам (можно указать несколько значений через запятую) &lt;br&gt; Возможные значения: - ready - Готов - never - Не готов - sometimes - Иногда (optional)
     * @param  string $relocation_readiness Готовность к переезду (можно указать несколько значений через запятую) &lt;br&gt; Возможные значения: - possible - Возможен - never - Невозможен (optional)
     * @param  string $gender Пол (можно указать несколько значений через запятую) &lt;br&gt; Возможные значения: - female - Женщина - male - Мужчина (optional)
     * @param  int $age_min Минимальный возраст (включительно, положительное число от 18 до 99) (optional, default to 18)
     * @param  int $age_max Максимальный возраст (включительно, положительное число от 18 до 99) (optional, default to 99)
     * @param  string $education_level Уровень образования (можно указать несколько значений через запятую) &lt;br&gt; Возможные значения: - higher - Высшее - unfinished-higher - Неоконченное высшее - secondary - Среднее - special-secondary - Среднее специальное (optional)
     * @param  int $experience_min Минимальный стаж работы (включительно, положительное число от 0 до 50) (optional, default to 0)
     * @param  int $experience_max Максимальный стаж работы (включительно, положительное число от 0 до 50) (optional, default to 50)
     * @param  int $salary_min Минимальный размер заработной платы (включительно, положительное число) (optional, default to 0)
     * @param  int $salary_max Максимальный размер заработной платы (включительно, положительное число) (optional)
     * @param  \DateTime $updated_than Дата последнего обновления (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\_, HTTP status code, HTTP response headers (array of strings)
     */
    public function getResumesWithHttpInfo($authorization, $per_page = '25', $page = '1', $cursor = null, $fields = null, $query = null, $location = null, $specialization = null, $schedule = null, $business_trip_readiness = null, $relocation_readiness = null, $gender = null, $age_min = '18', $age_max = '99', $education_level = null, $experience_min = '0', $experience_max = '50', $salary_min = '0', $salary_max = null, $updated_than = null)
    {
        $returnType = '\Swagger\Client\Model\_';
        $request = $this->getResumesRequest($authorization, $per_page, $page, $cursor, $fields, $query, $location, $specialization, $schedule, $business_trip_readiness, $relocation_readiness, $gender, $age_min, $age_max, $education_level, $experience_min, $experience_max, $salary_min, $salary_max, $updated_than);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\_',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ValidatingError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\AuthError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ServiceError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ServiceUnavailableError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getResumesAsync
     *
     * Поиск резюме
     *
     * @param  string $authorization Токен для авторизации (required)
     * @param  int $per_page Количество записей на странице (положительное число больше 0 и меньше 100) (optional, default to 25)
     * @param  int $page Номер страницы (положительное число больше 0) (optional, default to 1)
     * @param  int $cursor Курсор поиска (если не указан, будет начат новый поиск и его курсор будет возвращен в ответе) (optional)
     * @param  string $fields Поля ответа (можно указать несколько значений через запятую) (optional)
     * @param  string $query Поисковая фраза (optional)
     * @param  int $location Идентификатор региона поиска (можно указать несколько значений через запятую) &lt;br&gt; Метод принимает идентификаторы сущностей Region и City из [справочника](http://autoload.avito.ru/format/Locations.xml). (optional)
     * @param  int $specialization Идентификатор сферы деятельности (можно указать несколько значений через запятую) &lt;br&gt; Возможные значения: - 10166 - IT, интернет, телеком - 10167 - Медицина, фармацевтика - 10168 - Продажи - 10169 - Страхование - 10170 - Транспорт, логистика - 10171 - Образование, наука - 10172 - Строительство - 10173 - Туризм, рестораны - 10174 - Фитнес, салоны красоты - 10175 - Без опыта, студенты - 10180 - Автомобильный бизнес - 10181 - Бухгалтерия, финансы - 10182 - Высший менеджмент - 10183 - Госслужба, НКО - 10184 - ЖКХ, эксплуатация - 10185 - Искусство, развлечения - 10186 - Консультирование - 10187 - Маркетинг, реклама, PR - 10188 - Охрана, безопасность - 10189 - Управление персоналом - 10190 - Юриспруденция - 10191 - Административная работа - 10192 - Банки, инвестиции - 10193 - Производство, сырьё, с/х - 16844 - Домашний персонал (optional)
     * @param  string $schedule График работы (можно указать несколько значений через запятую) &lt;br&gt; Возможные значения: - partial-day - Неполный рабочий день - full-day - Полный рабочий день - fly-in-fly-out - Вахтовый метод - flexible - Гибкий график - shift - Сменный график - remote - Удаленная работа (optional)
     * @param  string $business_trip_readiness Готовность к командировкам (можно указать несколько значений через запятую) &lt;br&gt; Возможные значения: - ready - Готов - never - Не готов - sometimes - Иногда (optional)
     * @param  string $relocation_readiness Готовность к переезду (можно указать несколько значений через запятую) &lt;br&gt; Возможные значения: - possible - Возможен - never - Невозможен (optional)
     * @param  string $gender Пол (можно указать несколько значений через запятую) &lt;br&gt; Возможные значения: - female - Женщина - male - Мужчина (optional)
     * @param  int $age_min Минимальный возраст (включительно, положительное число от 18 до 99) (optional, default to 18)
     * @param  int $age_max Максимальный возраст (включительно, положительное число от 18 до 99) (optional, default to 99)
     * @param  string $education_level Уровень образования (можно указать несколько значений через запятую) &lt;br&gt; Возможные значения: - higher - Высшее - unfinished-higher - Неоконченное высшее - secondary - Среднее - special-secondary - Среднее специальное (optional)
     * @param  int $experience_min Минимальный стаж работы (включительно, положительное число от 0 до 50) (optional, default to 0)
     * @param  int $experience_max Максимальный стаж работы (включительно, положительное число от 0 до 50) (optional, default to 50)
     * @param  int $salary_min Минимальный размер заработной платы (включительно, положительное число) (optional, default to 0)
     * @param  int $salary_max Максимальный размер заработной платы (включительно, положительное число) (optional)
     * @param  \DateTime $updated_than Дата последнего обновления (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getResumesAsync($authorization, $per_page = '25', $page = '1', $cursor = null, $fields = null, $query = null, $location = null, $specialization = null, $schedule = null, $business_trip_readiness = null, $relocation_readiness = null, $gender = null, $age_min = '18', $age_max = '99', $education_level = null, $experience_min = '0', $experience_max = '50', $salary_min = '0', $salary_max = null, $updated_than = null)
    {
        return $this->getResumesAsyncWithHttpInfo($authorization, $per_page, $page, $cursor, $fields, $query, $location, $specialization, $schedule, $business_trip_readiness, $relocation_readiness, $gender, $age_min, $age_max, $education_level, $experience_min, $experience_max, $salary_min, $salary_max, $updated_than)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getResumesAsyncWithHttpInfo
     *
     * Поиск резюме
     *
     * @param  string $authorization Токен для авторизации (required)
     * @param  int $per_page Количество записей на странице (положительное число больше 0 и меньше 100) (optional, default to 25)
     * @param  int $page Номер страницы (положительное число больше 0) (optional, default to 1)
     * @param  int $cursor Курсор поиска (если не указан, будет начат новый поиск и его курсор будет возвращен в ответе) (optional)
     * @param  string $fields Поля ответа (можно указать несколько значений через запятую) (optional)
     * @param  string $query Поисковая фраза (optional)
     * @param  int $location Идентификатор региона поиска (можно указать несколько значений через запятую) &lt;br&gt; Метод принимает идентификаторы сущностей Region и City из [справочника](http://autoload.avito.ru/format/Locations.xml). (optional)
     * @param  int $specialization Идентификатор сферы деятельности (можно указать несколько значений через запятую) &lt;br&gt; Возможные значения: - 10166 - IT, интернет, телеком - 10167 - Медицина, фармацевтика - 10168 - Продажи - 10169 - Страхование - 10170 - Транспорт, логистика - 10171 - Образование, наука - 10172 - Строительство - 10173 - Туризм, рестораны - 10174 - Фитнес, салоны красоты - 10175 - Без опыта, студенты - 10180 - Автомобильный бизнес - 10181 - Бухгалтерия, финансы - 10182 - Высший менеджмент - 10183 - Госслужба, НКО - 10184 - ЖКХ, эксплуатация - 10185 - Искусство, развлечения - 10186 - Консультирование - 10187 - Маркетинг, реклама, PR - 10188 - Охрана, безопасность - 10189 - Управление персоналом - 10190 - Юриспруденция - 10191 - Административная работа - 10192 - Банки, инвестиции - 10193 - Производство, сырьё, с/х - 16844 - Домашний персонал (optional)
     * @param  string $schedule График работы (можно указать несколько значений через запятую) &lt;br&gt; Возможные значения: - partial-day - Неполный рабочий день - full-day - Полный рабочий день - fly-in-fly-out - Вахтовый метод - flexible - Гибкий график - shift - Сменный график - remote - Удаленная работа (optional)
     * @param  string $business_trip_readiness Готовность к командировкам (можно указать несколько значений через запятую) &lt;br&gt; Возможные значения: - ready - Готов - never - Не готов - sometimes - Иногда (optional)
     * @param  string $relocation_readiness Готовность к переезду (можно указать несколько значений через запятую) &lt;br&gt; Возможные значения: - possible - Возможен - never - Невозможен (optional)
     * @param  string $gender Пол (можно указать несколько значений через запятую) &lt;br&gt; Возможные значения: - female - Женщина - male - Мужчина (optional)
     * @param  int $age_min Минимальный возраст (включительно, положительное число от 18 до 99) (optional, default to 18)
     * @param  int $age_max Максимальный возраст (включительно, положительное число от 18 до 99) (optional, default to 99)
     * @param  string $education_level Уровень образования (можно указать несколько значений через запятую) &lt;br&gt; Возможные значения: - higher - Высшее - unfinished-higher - Неоконченное высшее - secondary - Среднее - special-secondary - Среднее специальное (optional)
     * @param  int $experience_min Минимальный стаж работы (включительно, положительное число от 0 до 50) (optional, default to 0)
     * @param  int $experience_max Максимальный стаж работы (включительно, положительное число от 0 до 50) (optional, default to 50)
     * @param  int $salary_min Минимальный размер заработной платы (включительно, положительное число) (optional, default to 0)
     * @param  int $salary_max Максимальный размер заработной платы (включительно, положительное число) (optional)
     * @param  \DateTime $updated_than Дата последнего обновления (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getResumesAsyncWithHttpInfo($authorization, $per_page = '25', $page = '1', $cursor = null, $fields = null, $query = null, $location = null, $specialization = null, $schedule = null, $business_trip_readiness = null, $relocation_readiness = null, $gender = null, $age_min = '18', $age_max = '99', $education_level = null, $experience_min = '0', $experience_max = '50', $salary_min = '0', $salary_max = null, $updated_than = null)
    {
        $returnType = '\Swagger\Client\Model\_';
        $request = $this->getResumesRequest($authorization, $per_page, $page, $cursor, $fields, $query, $location, $specialization, $schedule, $business_trip_readiness, $relocation_readiness, $gender, $age_min, $age_max, $education_level, $experience_min, $experience_max, $salary_min, $salary_max, $updated_than);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getResumes'
     *
     * @param  string $authorization Токен для авторизации (required)
     * @param  int $per_page Количество записей на странице (положительное число больше 0 и меньше 100) (optional, default to 25)
     * @param  int $page Номер страницы (положительное число больше 0) (optional, default to 1)
     * @param  int $cursor Курсор поиска (если не указан, будет начат новый поиск и его курсор будет возвращен в ответе) (optional)
     * @param  string $fields Поля ответа (можно указать несколько значений через запятую) (optional)
     * @param  string $query Поисковая фраза (optional)
     * @param  int $location Идентификатор региона поиска (можно указать несколько значений через запятую) &lt;br&gt; Метод принимает идентификаторы сущностей Region и City из [справочника](http://autoload.avito.ru/format/Locations.xml). (optional)
     * @param  int $specialization Идентификатор сферы деятельности (можно указать несколько значений через запятую) &lt;br&gt; Возможные значения: - 10166 - IT, интернет, телеком - 10167 - Медицина, фармацевтика - 10168 - Продажи - 10169 - Страхование - 10170 - Транспорт, логистика - 10171 - Образование, наука - 10172 - Строительство - 10173 - Туризм, рестораны - 10174 - Фитнес, салоны красоты - 10175 - Без опыта, студенты - 10180 - Автомобильный бизнес - 10181 - Бухгалтерия, финансы - 10182 - Высший менеджмент - 10183 - Госслужба, НКО - 10184 - ЖКХ, эксплуатация - 10185 - Искусство, развлечения - 10186 - Консультирование - 10187 - Маркетинг, реклама, PR - 10188 - Охрана, безопасность - 10189 - Управление персоналом - 10190 - Юриспруденция - 10191 - Административная работа - 10192 - Банки, инвестиции - 10193 - Производство, сырьё, с/х - 16844 - Домашний персонал (optional)
     * @param  string $schedule График работы (можно указать несколько значений через запятую) &lt;br&gt; Возможные значения: - partial-day - Неполный рабочий день - full-day - Полный рабочий день - fly-in-fly-out - Вахтовый метод - flexible - Гибкий график - shift - Сменный график - remote - Удаленная работа (optional)
     * @param  string $business_trip_readiness Готовность к командировкам (можно указать несколько значений через запятую) &lt;br&gt; Возможные значения: - ready - Готов - never - Не готов - sometimes - Иногда (optional)
     * @param  string $relocation_readiness Готовность к переезду (можно указать несколько значений через запятую) &lt;br&gt; Возможные значения: - possible - Возможен - never - Невозможен (optional)
     * @param  string $gender Пол (можно указать несколько значений через запятую) &lt;br&gt; Возможные значения: - female - Женщина - male - Мужчина (optional)
     * @param  int $age_min Минимальный возраст (включительно, положительное число от 18 до 99) (optional, default to 18)
     * @param  int $age_max Максимальный возраст (включительно, положительное число от 18 до 99) (optional, default to 99)
     * @param  string $education_level Уровень образования (можно указать несколько значений через запятую) &lt;br&gt; Возможные значения: - higher - Высшее - unfinished-higher - Неоконченное высшее - secondary - Среднее - special-secondary - Среднее специальное (optional)
     * @param  int $experience_min Минимальный стаж работы (включительно, положительное число от 0 до 50) (optional, default to 0)
     * @param  int $experience_max Максимальный стаж работы (включительно, положительное число от 0 до 50) (optional, default to 50)
     * @param  int $salary_min Минимальный размер заработной платы (включительно, положительное число) (optional, default to 0)
     * @param  int $salary_max Максимальный размер заработной платы (включительно, положительное число) (optional)
     * @param  \DateTime $updated_than Дата последнего обновления (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getResumesRequest($authorization, $per_page = '25', $page = '1', $cursor = null, $fields = null, $query = null, $location = null, $specialization = null, $schedule = null, $business_trip_readiness = null, $relocation_readiness = null, $gender = null, $age_min = '18', $age_max = '99', $education_level = null, $experience_min = '0', $experience_max = '50', $salary_min = '0', $salary_max = null, $updated_than = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling getResumes'
            );
        }

        $resourcePath = '/job/v1/resumes/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($per_page !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($per_page, 'int32');
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page, 'int32');
        }
        // query params
        if ($cursor !== null) {
            $queryParams['cursor'] = ObjectSerializer::toQueryValue($cursor, 'int64');
        }
        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields, null);
        }
        // query params
        if ($query !== null) {
            $queryParams['query'] = ObjectSerializer::toQueryValue($query, null);
        }
        // query params
        if ($location !== null) {
            $queryParams['location'] = ObjectSerializer::toQueryValue($location, 'int64');
        }
        // query params
        if ($specialization !== null) {
            $queryParams['specialization'] = ObjectSerializer::toQueryValue($specialization, 'int64');
        }
        // query params
        if ($schedule !== null) {
            $queryParams['schedule'] = ObjectSerializer::toQueryValue($schedule, null);
        }
        // query params
        if ($business_trip_readiness !== null) {
            $queryParams['business_trip_readiness'] = ObjectSerializer::toQueryValue($business_trip_readiness, null);
        }
        // query params
        if ($relocation_readiness !== null) {
            $queryParams['relocation_readiness'] = ObjectSerializer::toQueryValue($relocation_readiness, null);
        }
        // query params
        if ($gender !== null) {
            $queryParams['gender'] = ObjectSerializer::toQueryValue($gender, null);
        }
        // query params
        if ($age_min !== null) {
            $queryParams['age_min'] = ObjectSerializer::toQueryValue($age_min, 'int32');
        }
        // query params
        if ($age_max !== null) {
            $queryParams['age_max'] = ObjectSerializer::toQueryValue($age_max, 'int32');
        }
        // query params
        if ($education_level !== null) {
            $queryParams['education_level'] = ObjectSerializer::toQueryValue($education_level, null);
        }
        // query params
        if ($experience_min !== null) {
            $queryParams['experience_min'] = ObjectSerializer::toQueryValue($experience_min, 'int32');
        }
        // query params
        if ($experience_max !== null) {
            $queryParams['experience_max'] = ObjectSerializer::toQueryValue($experience_max, 'int32');
        }
        // query params
        if ($salary_min !== null) {
            $queryParams['salary_min'] = ObjectSerializer::toQueryValue($salary_min, 'int64');
        }
        // query params
        if ($salary_max !== null) {
            $queryParams['salary_max'] = ObjectSerializer::toQueryValue($salary_max, 'int64');
        }
        // query params
        if ($updated_than !== null) {
            $queryParams['updated_than'] = ObjectSerializer::toQueryValue($updated_than, 'date-time');
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postProlongateVacancy
     *
     * Реактивация вакансии
     *
     * @param  \Swagger\Client\Model\VacancyProlongate $body body (required)
     * @param  string $authorization Токен для авторизации (required)
     * @param  int $vacancy_id Идентификатор вакансии на сайте (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function postProlongateVacancy($body, $authorization, $vacancy_id)
    {
        $this->postProlongateVacancyWithHttpInfo($body, $authorization, $vacancy_id);
    }

    /**
     * Operation postProlongateVacancyWithHttpInfo
     *
     * Реактивация вакансии
     *
     * @param  \Swagger\Client\Model\VacancyProlongate $body (required)
     * @param  string $authorization Токен для авторизации (required)
     * @param  int $vacancy_id Идентификатор вакансии на сайте (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postProlongateVacancyWithHttpInfo($body, $authorization, $vacancy_id)
    {
        $returnType = '';
        $request = $this->postProlongateVacancyRequest($body, $authorization, $vacancy_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\BadRequestShort',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\AuthError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PaymentError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ActivationForbiddenError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ItemNotFoundError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ServiceError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ServiceUnavailableError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postProlongateVacancyAsync
     *
     * Реактивация вакансии
     *
     * @param  \Swagger\Client\Model\VacancyProlongate $body (required)
     * @param  string $authorization Токен для авторизации (required)
     * @param  int $vacancy_id Идентификатор вакансии на сайте (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postProlongateVacancyAsync($body, $authorization, $vacancy_id)
    {
        return $this->postProlongateVacancyAsyncWithHttpInfo($body, $authorization, $vacancy_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postProlongateVacancyAsyncWithHttpInfo
     *
     * Реактивация вакансии
     *
     * @param  \Swagger\Client\Model\VacancyProlongate $body (required)
     * @param  string $authorization Токен для авторизации (required)
     * @param  int $vacancy_id Идентификатор вакансии на сайте (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postProlongateVacancyAsyncWithHttpInfo($body, $authorization, $vacancy_id)
    {
        $returnType = '';
        $request = $this->postProlongateVacancyRequest($body, $authorization, $vacancy_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postProlongateVacancy'
     *
     * @param  \Swagger\Client\Model\VacancyProlongate $body (required)
     * @param  string $authorization Токен для авторизации (required)
     * @param  int $vacancy_id Идентификатор вакансии на сайте (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postProlongateVacancyRequest($body, $authorization, $vacancy_id)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling postProlongateVacancy'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling postProlongateVacancy'
            );
        }
        // verify the required parameter 'vacancy_id' is set
        if ($vacancy_id === null || (is_array($vacancy_id) && count($vacancy_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vacancy_id when calling postProlongateVacancy'
            );
        }

        $resourcePath = '/job/v1/vacancies/{vacancy_id}/prolongate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($vacancy_id !== null) {
            $resourcePath = str_replace(
                '{' . 'vacancy_id' . '}',
                ObjectSerializer::toPathValue($vacancy_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postVacancy
     *
     * Публикация вакансии
     *
     * @param  \Swagger\Client\Model\VacancyCreate $body body (required)
     * @param  string $authorization Токен для авторизации (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\VacanctCreateResult
     */
    public function postVacancy($body, $authorization)
    {
        list($response) = $this->postVacancyWithHttpInfo($body, $authorization);
        return $response;
    }

    /**
     * Operation postVacancyWithHttpInfo
     *
     * Публикация вакансии
     *
     * @param  \Swagger\Client\Model\VacancyCreate $body (required)
     * @param  string $authorization Токен для авторизации (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\VacanctCreateResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function postVacancyWithHttpInfo($body, $authorization)
    {
        $returnType = '\Swagger\Client\Model\VacanctCreateResult';
        $request = $this->postVacancyRequest($body, $authorization);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\VacanctCreateResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\AuthError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PaymentError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\CreationForbiddenError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ServiceError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ServiceUnavailableError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postVacancyAsync
     *
     * Публикация вакансии
     *
     * @param  \Swagger\Client\Model\VacancyCreate $body (required)
     * @param  string $authorization Токен для авторизации (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postVacancyAsync($body, $authorization)
    {
        return $this->postVacancyAsyncWithHttpInfo($body, $authorization)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postVacancyAsyncWithHttpInfo
     *
     * Публикация вакансии
     *
     * @param  \Swagger\Client\Model\VacancyCreate $body (required)
     * @param  string $authorization Токен для авторизации (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postVacancyAsyncWithHttpInfo($body, $authorization)
    {
        $returnType = '\Swagger\Client\Model\VacanctCreateResult';
        $request = $this->postVacancyRequest($body, $authorization);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postVacancy'
     *
     * @param  \Swagger\Client\Model\VacancyCreate $body (required)
     * @param  string $authorization Токен для авторизации (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postVacancyRequest($body, $authorization)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling postVacancy'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling postVacancy'
            );
        }

        $resourcePath = '/job/v1/vacancies';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putArchivedVacancy
     *
     * Остановка публикации вакансии
     *
     * @param  string $authorization Токен для авторизации (required)
     * @param  int $vacancy_id Идентификатор вакансии на сайте (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function putArchivedVacancy($authorization, $vacancy_id)
    {
        $this->putArchivedVacancyWithHttpInfo($authorization, $vacancy_id);
    }

    /**
     * Operation putArchivedVacancyWithHttpInfo
     *
     * Остановка публикации вакансии
     *
     * @param  string $authorization Токен для авторизации (required)
     * @param  int $vacancy_id Идентификатор вакансии на сайте (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function putArchivedVacancyWithHttpInfo($authorization, $vacancy_id)
    {
        $returnType = '';
        $request = $this->putArchivedVacancyRequest($authorization, $vacancy_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\AuthError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PaymentError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\StoppingForbiddenError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ItemNotFoundError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ServiceError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ServiceUnavailableError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putArchivedVacancyAsync
     *
     * Остановка публикации вакансии
     *
     * @param  string $authorization Токен для авторизации (required)
     * @param  int $vacancy_id Идентификатор вакансии на сайте (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putArchivedVacancyAsync($authorization, $vacancy_id)
    {
        return $this->putArchivedVacancyAsyncWithHttpInfo($authorization, $vacancy_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putArchivedVacancyAsyncWithHttpInfo
     *
     * Остановка публикации вакансии
     *
     * @param  string $authorization Токен для авторизации (required)
     * @param  int $vacancy_id Идентификатор вакансии на сайте (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putArchivedVacancyAsyncWithHttpInfo($authorization, $vacancy_id)
    {
        $returnType = '';
        $request = $this->putArchivedVacancyRequest($authorization, $vacancy_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putArchivedVacancy'
     *
     * @param  string $authorization Токен для авторизации (required)
     * @param  int $vacancy_id Идентификатор вакансии на сайте (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putArchivedVacancyRequest($authorization, $vacancy_id)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling putArchivedVacancy'
            );
        }
        // verify the required parameter 'vacancy_id' is set
        if ($vacancy_id === null || (is_array($vacancy_id) && count($vacancy_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vacancy_id when calling putArchivedVacancy'
            );
        }

        $resourcePath = '/job/v1/vacancies/archived/{vacancy_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($vacancy_id !== null) {
            $resourcePath = str_replace(
                '{' . 'vacancy_id' . '}',
                ObjectSerializer::toPathValue($vacancy_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putVacancy
     *
     * Редактирование вакансии
     *
     * @param  \Swagger\Client\Model\VacancyUpdate $body body (required)
     * @param  string $authorization Токен для авторизации (required)
     * @param  int $vacancy_id Идентификатор вакансии на сайте (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function putVacancy($body, $authorization, $vacancy_id)
    {
        $this->putVacancyWithHttpInfo($body, $authorization, $vacancy_id);
    }

    /**
     * Operation putVacancyWithHttpInfo
     *
     * Редактирование вакансии
     *
     * @param  \Swagger\Client\Model\VacancyUpdate $body (required)
     * @param  string $authorization Токен для авторизации (required)
     * @param  int $vacancy_id Идентификатор вакансии на сайте (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function putVacancyWithHttpInfo($body, $authorization, $vacancy_id)
    {
        $returnType = '';
        $request = $this->putVacancyRequest($body, $authorization, $vacancy_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\AuthError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PaymentError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EditingForbiddenError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ItemNotFoundError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ServiceError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ServiceUnavailableError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putVacancyAsync
     *
     * Редактирование вакансии
     *
     * @param  \Swagger\Client\Model\VacancyUpdate $body (required)
     * @param  string $authorization Токен для авторизации (required)
     * @param  int $vacancy_id Идентификатор вакансии на сайте (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putVacancyAsync($body, $authorization, $vacancy_id)
    {
        return $this->putVacancyAsyncWithHttpInfo($body, $authorization, $vacancy_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putVacancyAsyncWithHttpInfo
     *
     * Редактирование вакансии
     *
     * @param  \Swagger\Client\Model\VacancyUpdate $body (required)
     * @param  string $authorization Токен для авторизации (required)
     * @param  int $vacancy_id Идентификатор вакансии на сайте (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putVacancyAsyncWithHttpInfo($body, $authorization, $vacancy_id)
    {
        $returnType = '';
        $request = $this->putVacancyRequest($body, $authorization, $vacancy_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putVacancy'
     *
     * @param  \Swagger\Client\Model\VacancyUpdate $body (required)
     * @param  string $authorization Токен для авторизации (required)
     * @param  int $vacancy_id Идентификатор вакансии на сайте (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putVacancyRequest($body, $authorization, $vacancy_id)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling putVacancy'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling putVacancy'
            );
        }
        // verify the required parameter 'vacancy_id' is set
        if ($vacancy_id === null || (is_array($vacancy_id) && count($vacancy_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vacancy_id when calling putVacancy'
            );
        }

        $resourcePath = '/job/v1/vacancies/{vacancy_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($vacancy_id !== null) {
            $resourcePath = str_replace(
                '{' . 'vacancy_id' . '}',
                ObjectSerializer::toPathValue($vacancy_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
