<?php
/**
 * VacancyCreate
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Авито API для бизнеса
 *
 * # Общая информация Описание API произведено в формате [**Swagger 3.0**](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md). Вы можете использовать данный файл для ознакомления с методами API, а также для генерации базового кода для работы с API на удобном для вас языке программирования с помощью утилиты [**Swagger Codegen**](https://swagger.io/swagger-codegen/) или online сервиса [**Swagger Editor**](https://editor.swagger.io/).  **Авито API для бизнеса предоставляется согласно [Условиям использования](https://api.avito.ru/docs/public/APITermsOfServiceV1.pdf).**  По всем вопросам работы с API необходимо обращаться в Службу Поддержки профессиональных инструментов:  <li>телефон: <b>+7 495 777-10-66</b></li> <li>email: <a href=\"mailto:supportautoload@avito.ru\">supportautoload@avito.ru</a></li>  # Типы авторизации Для использования данного API запрос должен быть авторизован. В данный момент API Авито использует следующие механизмы авторизации.  <!-- ReDoc-Inject: <security-definitions> -->  Подробнее о каждом механизме и его назначении можно прочитать в соответствующем разделе.
 *
 * OpenAPI spec version: 1
 * Contact: supportautoload@avito.ru
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.23
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * VacancyCreate Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class VacancyCreate implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'VacancyCreate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
'description' => 'string',
'html_tags' => '\Swagger\Client\Model\HtmlTags',
'billing_type' => 'string',
'allow_messages' => 'bool',
'contacts' => '\Swagger\Client\Model\Contacts',
'custom_employer_name' => 'string',
'address' => 'string',
'coordinates' => '\Swagger\Client\Model\Coordinates',
'salary' => 'int',
'business_area' => 'int',
'schedule' => '\Swagger\Client\Model\VacancyCreateSchedule',
'experience' => '\Swagger\Client\Model\VacancyCreateExperience'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
'description' => null,
'html_tags' => null,
'billing_type' => null,
'allow_messages' => null,
'contacts' => null,
'custom_employer_name' => null,
'address' => null,
'coordinates' => null,
'salary' => null,
'business_area' => null,
'schedule' => null,
'experience' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
'description' => 'description',
'html_tags' => 'html_tags',
'billing_type' => 'billing_type',
'allow_messages' => 'allow_messages',
'contacts' => 'contacts',
'custom_employer_name' => 'custom_employer_name',
'address' => 'address',
'coordinates' => 'coordinates',
'salary' => 'salary',
'business_area' => 'business_area',
'schedule' => 'schedule',
'experience' => 'experience'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
'description' => 'setDescription',
'html_tags' => 'setHtmlTags',
'billing_type' => 'setBillingType',
'allow_messages' => 'setAllowMessages',
'contacts' => 'setContacts',
'custom_employer_name' => 'setCustomEmployerName',
'address' => 'setAddress',
'coordinates' => 'setCoordinates',
'salary' => 'setSalary',
'business_area' => 'setBusinessArea',
'schedule' => 'setSchedule',
'experience' => 'setExperience'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
'description' => 'getDescription',
'html_tags' => 'getHtmlTags',
'billing_type' => 'getBillingType',
'allow_messages' => 'getAllowMessages',
'contacts' => 'getContacts',
'custom_employer_name' => 'getCustomEmployerName',
'address' => 'getAddress',
'coordinates' => 'getCoordinates',
'salary' => 'getSalary',
'business_area' => 'getBusinessArea',
'schedule' => 'getSchedule',
'experience' => 'getExperience'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const BILLING_TYPE_PACKAGE = 'package';
const BILLING_TYPE_SINGLE = 'single';
const BILLING_TYPE_PACKAGE_OR_SINGLE = 'packageOrSingle';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBillingTypeAllowableValues()
    {
        return [
            self::BILLING_TYPE_PACKAGE,
self::BILLING_TYPE_SINGLE,
self::BILLING_TYPE_PACKAGE_OR_SINGLE,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['html_tags'] = isset($data['html_tags']) ? $data['html_tags'] : null;
        $this->container['billing_type'] = isset($data['billing_type']) ? $data['billing_type'] : null;
        $this->container['allow_messages'] = isset($data['allow_messages']) ? $data['allow_messages'] : null;
        $this->container['contacts'] = isset($data['contacts']) ? $data['contacts'] : null;
        $this->container['custom_employer_name'] = isset($data['custom_employer_name']) ? $data['custom_employer_name'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['coordinates'] = isset($data['coordinates']) ? $data['coordinates'] : null;
        $this->container['salary'] = isset($data['salary']) ? $data['salary'] : null;
        $this->container['business_area'] = isset($data['business_area']) ? $data['business_area'] : null;
        $this->container['schedule'] = isset($data['schedule']) ? $data['schedule'] : null;
        $this->container['experience'] = isset($data['experience']) ? $data['experience'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ($this->container['billing_type'] === null) {
            $invalidProperties[] = "'billing_type' can't be null";
        }
        $allowedValues = $this->getBillingTypeAllowableValues();
        if (!is_null($this->container['billing_type']) && !in_array($this->container['billing_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'billing_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['business_area'] === null) {
            $invalidProperties[] = "'business_area' can't be null";
        }
        if ($this->container['schedule'] === null) {
            $invalidProperties[] = "'schedule' can't be null";
        }
        if ($this->container['experience'] === null) {
            $invalidProperties[] = "'experience' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Название вакансии (строка длиной от 0 до 50 символов)
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Описание вакансии (строка длиной от 200 до 5000 символов)
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets html_tags
     *
     * @return \Swagger\Client\Model\HtmlTags
     */
    public function getHtmlTags()
    {
        return $this->container['html_tags'];
    }

    /**
     * Sets html_tags
     *
     * @param \Swagger\Client\Model\HtmlTags $html_tags html_tags
     *
     * @return $this
     */
    public function setHtmlTags($html_tags)
    {
        $this->container['html_tags'] = $html_tags;

        return $this;
    }

    /**
     * Gets billing_type
     *
     * @return string
     */
    public function getBillingType()
    {
        return $this->container['billing_type'];
    }

    /**
     * Sets billing_type
     *
     * @param string $billing_type Вариант платного размещения  Возможные значения:   - \"package\" - размещение объявления осуществляется только при наличии подходящего пакета размещения   - \"packageOrSingle\" - при наличии подходящего пакета оплата размещения объявления произойдет с него; если нет подходящего пакета, но достаточно денег на кошельке Авито, то произойдет разовое размещение   - \"single\" - только разовое размещение, произойдет при наличии достаточной суммы на кошельке Авито; если есть подходящий пакет размещения, он будет проигнорирован
     *
     * @return $this
     */
    public function setBillingType($billing_type)
    {
        $allowedValues = $this->getBillingTypeAllowableValues();
        if (!in_array($billing_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'billing_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['billing_type'] = $billing_type;

        return $this;
    }

    /**
     * Gets allow_messages
     *
     * @return bool
     */
    public function getAllowMessages()
    {
        return $this->container['allow_messages'];
    }

    /**
     * Sets allow_messages
     *
     * @param bool $allow_messages Возможность откликнуться на вакансию через сайт
     *
     * @return $this
     */
    public function setAllowMessages($allow_messages)
    {
        $this->container['allow_messages'] = $allow_messages;

        return $this;
    }

    /**
     * Gets contacts
     *
     * @return \Swagger\Client\Model\Contacts
     */
    public function getContacts()
    {
        return $this->container['contacts'];
    }

    /**
     * Sets contacts
     *
     * @param \Swagger\Client\Model\Contacts $contacts contacts
     *
     * @return $this
     */
    public function setContacts($contacts)
    {
        $this->container['contacts'] = $contacts;

        return $this;
    }

    /**
     * Gets custom_employer_name
     *
     * @return string
     */
    public function getCustomEmployerName()
    {
        return $this->container['custom_employer_name'];
    }

    /**
     * Sets custom_employer_name
     *
     * @param string $custom_employer_name Название компании (строка длиной от 0 до 255 символов)
     *
     * @return $this
     */
    public function setCustomEmployerName($custom_employer_name)
    {
        $this->container['custom_employer_name'] = $custom_employer_name;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string $address Полный адрес объекта (строка длиной от 0 до 256 символов)
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets coordinates
     *
     * @return \Swagger\Client\Model\Coordinates
     */
    public function getCoordinates()
    {
        return $this->container['coordinates'];
    }

    /**
     * Sets coordinates
     *
     * @param \Swagger\Client\Model\Coordinates $coordinates coordinates
     *
     * @return $this
     */
    public function setCoordinates($coordinates)
    {
        $this->container['coordinates'] = $coordinates;

        return $this;
    }

    /**
     * Gets salary
     *
     * @return int
     */
    public function getSalary()
    {
        return $this->container['salary'];
    }

    /**
     * Sets salary
     *
     * @param int $salary Зарплата, рублей в месяц
     *
     * @return $this
     */
    public function setSalary($salary)
    {
        $this->container['salary'] = $salary;

        return $this;
    }

    /**
     * Gets business_area
     *
     * @return int
     */
    public function getBusinessArea()
    {
        return $this->container['business_area'];
    }

    /**
     * Sets business_area
     *
     * @param int $business_area Идентификатор сферы деятельности  Возможные значения: - 1 - IT, интернет, телеком - 13 - Медицина, фармацевтика - 17 - Продажи - 19 - Страхование - 21 - Транспорт, логистика - 14 - Образование, наука - 20 - Строительство - 22 - Туризм, рестораны - 24 - Фитнес, салоны красоты - 15 - Без опыта, студенты - 7 - Автомобильный бизнес - 2 - Бухгалтерия, финансы - 9 - Высший менеджмент - 16 - Госслужба, НКО - 10124 - ЖКХ, эксплуатация - 11 - Искусство, развлечения - 12 - Консультирование - 3 - Маркетинг, реклама, PR - 8 - Охрана, безопасность - 6 - Управление персоналом - 23 - Юриспруденция - 4 - Административная работа - 5 - Банки, инвестиции - 18 - Производство, сырьё, с/х - 27 - Домашний персонал
     *
     * @return $this
     */
    public function setBusinessArea($business_area)
    {
        $this->container['business_area'] = $business_area;

        return $this;
    }

    /**
     * Gets schedule
     *
     * @return \Swagger\Client\Model\VacancyCreateSchedule
     */
    public function getSchedule()
    {
        return $this->container['schedule'];
    }

    /**
     * Sets schedule
     *
     * @param \Swagger\Client\Model\VacancyCreateSchedule $schedule schedule
     *
     * @return $this
     */
    public function setSchedule($schedule)
    {
        $this->container['schedule'] = $schedule;

        return $this;
    }

    /**
     * Gets experience
     *
     * @return \Swagger\Client\Model\VacancyCreateExperience
     */
    public function getExperience()
    {
        return $this->container['experience'];
    }

    /**
     * Sets experience
     *
     * @param \Swagger\Client\Model\VacancyCreateExperience $experience experience
     *
     * @return $this
     */
    public function setExperience($experience)
    {
        $this->container['experience'] = $experience;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
