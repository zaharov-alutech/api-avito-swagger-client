<?php
/**
 * Negotiation
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Авито API для бизнеса
 *
 * # Общая информация Описание API произведено в формате [**Swagger 3.0**](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md). Вы можете использовать данный файл для ознакомления с методами API, а также для генерации базового кода для работы с API на удобном для вас языке программирования с помощью утилиты [**Swagger Codegen**](https://swagger.io/swagger-codegen/) или online сервиса [**Swagger Editor**](https://editor.swagger.io/).  **Авито API для бизнеса предоставляется согласно [Условиям использования](https://api.avito.ru/docs/public/APITermsOfServiceV1.pdf).**  По всем вопросам работы с API необходимо обращаться в Службу Поддержки профессиональных инструментов:  <li>телефон: <b>+7 495 777-10-66</b></li> <li>email: <a href=\"mailto:supportautoload@avito.ru\">supportautoload@avito.ru</a></li>  # Типы авторизации Для использования данного API запрос должен быть авторизован. В данный момент API Авито использует следующие механизмы авторизации.  <!-- ReDoc-Inject: <security-definitions> -->  Подробнее о каждом механизме и его назначении можно прочитать в соответствующем разделе.
 *
 * OpenAPI spec version: 1
 * Contact: supportautoload@avito.ru
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.23
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Negotiation Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Negotiation implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Negotiation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
'created_at' => 'string',
'updated_at' => 'string',
'state' => 'string',
'chat_id' => 'string',
'resume' => '\Swagger\Client\Model\NegotiationResume',
'vacancy' => '\Swagger\Client\Model\NegotiationVacancy',
'called' => 'bool',
'company_name' => 'string',
'manager_name' => 'string',
'type' => 'string',
'user' => '\Swagger\Client\Model\NegotiationUser',
'contact' => '\Swagger\Client\Model\NegotiationContact'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
'created_at' => 'date-time (RFC3339)',
'updated_at' => 'date-time (RFC3339)',
'state' => null,
'chat_id' => null,
'resume' => null,
'vacancy' => null,
'called' => null,
'company_name' => null,
'manager_name' => null,
'type' => null,
'user' => null,
'contact' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'created_at' => 'created_at',
'updated_at' => 'updated_at',
'state' => 'state',
'chat_id' => 'chat_id',
'resume' => 'resume',
'vacancy' => 'vacancy',
'called' => 'called',
'company_name' => 'company_name',
'manager_name' => 'manager_name',
'type' => 'type',
'user' => 'user',
'contact' => 'contact'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'created_at' => 'setCreatedAt',
'updated_at' => 'setUpdatedAt',
'state' => 'setState',
'chat_id' => 'setChatId',
'resume' => 'setResume',
'vacancy' => 'setVacancy',
'called' => 'setCalled',
'company_name' => 'setCompanyName',
'manager_name' => 'setManagerName',
'type' => 'setType',
'user' => 'setUser',
'contact' => 'setContact'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'created_at' => 'getCreatedAt',
'updated_at' => 'getUpdatedAt',
'state' => 'getState',
'chat_id' => 'getChatId',
'resume' => 'getResume',
'vacancy' => 'getVacancy',
'called' => 'getCalled',
'company_name' => 'getCompanyName',
'manager_name' => 'getManagerName',
'type' => 'getType',
'user' => 'getUser',
'contact' => 'getContact'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['chat_id'] = isset($data['chat_id']) ? $data['chat_id'] : null;
        $this->container['resume'] = isset($data['resume']) ? $data['resume'] : null;
        $this->container['vacancy'] = isset($data['vacancy']) ? $data['vacancy'] : null;
        $this->container['called'] = isset($data['called']) ? $data['called'] : null;
        $this->container['company_name'] = isset($data['company_name']) ? $data['company_name'] : null;
        $this->container['manager_name'] = isset($data['manager_name']) ? $data['manager_name'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['user'] = isset($data['user']) ? $data['user'] : null;
        $this->container['contact'] = isset($data['contact']) ? $data['contact'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at Дата создания отклика
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string $updated_at Дата последнего обновления отклика
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state Статус отклика зависит от поля type. Может принимать следующие значения:<br/> Для откликов типа `response` 1. `new` - отклик был создан<br/> 2. `response` - соискатель согласился отправить о себе информацию<br/> 3. `discard` - соискатель отказался отправить о себе информацию<br/> 4. `reject` - работодатель отказал соискателю<br/> 5. `special` - настроены автоответы или другая нестандартная логика<br/>  Для откликов типа `invitation` 1. `new` - отклик был создан<br/> 2. `phone_sent` - работодатель отправил свои контактные данные соискателю.
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets chat_id
     *
     * @return string
     */
    public function getChatId()
    {
        return $this->container['chat_id'];
    }

    /**
     * Sets chat_id
     *
     * @param string $chat_id Идентификатор чата
     *
     * @return $this
     */
    public function setChatId($chat_id)
    {
        $this->container['chat_id'] = $chat_id;

        return $this;
    }

    /**
     * Gets resume
     *
     * @return \Swagger\Client\Model\NegotiationResume
     */
    public function getResume()
    {
        return $this->container['resume'];
    }

    /**
     * Sets resume
     *
     * @param \Swagger\Client\Model\NegotiationResume $resume resume
     *
     * @return $this
     */
    public function setResume($resume)
    {
        $this->container['resume'] = $resume;

        return $this;
    }

    /**
     * Gets vacancy
     *
     * @return \Swagger\Client\Model\NegotiationVacancy
     */
    public function getVacancy()
    {
        return $this->container['vacancy'];
    }

    /**
     * Sets vacancy
     *
     * @param \Swagger\Client\Model\NegotiationVacancy $vacancy vacancy
     *
     * @return $this
     */
    public function setVacancy($vacancy)
    {
        $this->container['vacancy'] = $vacancy;

        return $this;
    }

    /**
     * Gets called
     *
     * @return bool
     */
    public function getCalled()
    {
        return $this->container['called'];
    }

    /**
     * Sets called
     *
     * @param bool $called Отклик был создан через звонок
     *
     * @return $this
     */
    public function setCalled($called)
    {
        $this->container['called'] = $called;

        return $this;
    }

    /**
     * Gets company_name
     *
     * @return string
     */
    public function getCompanyName()
    {
        return $this->container['company_name'];
    }

    /**
     * Sets company_name
     *
     * @param string $company_name Наименование компании
     *
     * @return $this
     */
    public function setCompanyName($company_name)
    {
        $this->container['company_name'] = $company_name;

        return $this;
    }

    /**
     * Gets manager_name
     *
     * @return string
     */
    public function getManagerName()
    {
        return $this->container['manager_name'];
    }

    /**
     * Sets manager_name
     *
     * @param string $manager_name Имя менеджера компании
     *
     * @return $this
     */
    public function setManagerName($manager_name)
    {
        $this->container['manager_name'] = $manager_name;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Тип отклика<br/> `response` - соискатель откликнулся на вакансию<br/> `invitation` - работодатель пригласил соискателя по резюме
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets user
     *
     * @return \Swagger\Client\Model\NegotiationUser
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param \Swagger\Client\Model\NegotiationUser $user user
     *
     * @return $this
     */
    public function setUser($user)
    {
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets contact
     *
     * @return \Swagger\Client\Model\NegotiationContact
     */
    public function getContact()
    {
        return $this->container['contact'];
    }

    /**
     * Sets contact
     *
     * @param \Swagger\Client\Model\NegotiationContact $contact contact
     *
     * @return $this
     */
    public function setContact($contact)
    {
        $this->container['contact'] = $contact;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
