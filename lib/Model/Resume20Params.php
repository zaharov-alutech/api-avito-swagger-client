<?php
/**
 * Resume20Params
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Авито API для бизнеса
 *
 * # Общая информация Описание API произведено в формате [**Swagger 3.0**](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md). Вы можете использовать данный файл для ознакомления с методами API, а также для генерации базового кода для работы с API на удобном для вас языке программирования с помощью утилиты [**Swagger Codegen**](https://swagger.io/swagger-codegen/) или online сервиса [**Swagger Editor**](https://editor.swagger.io/).  **Авито API для бизнеса предоставляется согласно [Условиям использования](https://api.avito.ru/docs/public/APITermsOfServiceV1.pdf).**  По всем вопросам работы с API необходимо обращаться в Службу Поддержки профессиональных инструментов:  <li>телефон: <b>+7 495 777-10-66</b></li> <li>email: <a href=\"mailto:supportautoload@avito.ru\">supportautoload@avito.ru</a></li>  # Типы авторизации Для использования данного API запрос должен быть авторизован. В данный момент API Авито использует следующие механизмы авторизации.  <!-- ReDoc-Inject: <security-definitions> -->  Подробнее о каждом механизме и его назначении можно прочитать в соответствующем разделе.
 *
 * OpenAPI spec version: 1
 * Contact: supportautoload@avito.ru
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.23
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Resume20Params Class Doc Comment
 *
 * @category Class
 * @description Блок с параметрами резюме. Все поля опциональны и выводятся при наличии
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Resume20Params implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Resume2.0_params';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'ability_to_business_trip' => 'string',
'address' => 'string',
'age' => 'int',
'business_area' => 'string',
'education' => 'string',
'education_list' => '\Swagger\Client\Model\Resume20ParamsEducationList[]',
'experience_list' => '\Swagger\Client\Model\Resume20ParamsExperienceList[]',
'language_list' => '\Swagger\Client\Model\Resume20ParamsLanguageList[]',
'moving' => 'string',
'nationality' => 'string',
'pol' => 'string',
'razreshenie_na_rabotu_v_rossii' => 'string',
'schedule' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'ability_to_business_trip' => null,
'address' => null,
'age' => 'int32',
'business_area' => null,
'education' => null,
'education_list' => null,
'experience_list' => null,
'language_list' => null,
'moving' => null,
'nationality' => null,
'pol' => null,
'razreshenie_na_rabotu_v_rossii' => null,
'schedule' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ability_to_business_trip' => 'ability_to_business_trip',
'address' => 'address',
'age' => 'age',
'business_area' => 'business_area',
'education' => 'education',
'education_list' => 'education_list',
'experience_list' => 'experience_list',
'language_list' => 'language_list',
'moving' => 'moving',
'nationality' => 'nationality',
'pol' => 'pol',
'razreshenie_na_rabotu_v_rossii' => 'razreshenie_na_rabotu_v_rossii',
'schedule' => 'schedule'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ability_to_business_trip' => 'setAbilityToBusinessTrip',
'address' => 'setAddress',
'age' => 'setAge',
'business_area' => 'setBusinessArea',
'education' => 'setEducation',
'education_list' => 'setEducationList',
'experience_list' => 'setExperienceList',
'language_list' => 'setLanguageList',
'moving' => 'setMoving',
'nationality' => 'setNationality',
'pol' => 'setPol',
'razreshenie_na_rabotu_v_rossii' => 'setRazreshenieNaRabotuVRossii',
'schedule' => 'setSchedule'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ability_to_business_trip' => 'getAbilityToBusinessTrip',
'address' => 'getAddress',
'age' => 'getAge',
'business_area' => 'getBusinessArea',
'education' => 'getEducation',
'education_list' => 'getEducationList',
'experience_list' => 'getExperienceList',
'language_list' => 'getLanguageList',
'moving' => 'getMoving',
'nationality' => 'getNationality',
'pol' => 'getPol',
'razreshenie_na_rabotu_v_rossii' => 'getRazreshenieNaRabotuVRossii',
'schedule' => 'getSchedule'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ABILITY_TO_BUSINESS_TRIP_ = 'Не готов';
const ABILITY_TO_BUSINESS_TRIP__1 = 'Готов';
const ABILITY_TO_BUSINESS_TRIP__2 = 'Иногда';
const BUSINESS_AREA_IT_ = 'IT, интернет, телеком';
const BUSINESS_AREA_ = 'Автомобильный бизнес';
const BUSINESS_AREA__2 = 'Административная работа';
const BUSINESS_AREA__3 = 'Банки, инвестиции';
const BUSINESS_AREA__4 = 'Без опыта, студенты';
const BUSINESS_AREA__5 = 'Бухгалтерия, финансы';
const BUSINESS_AREA__6 = 'Высший менеджмент';
const BUSINESS_AREA__7 = 'Госслужба, НКО';
const BUSINESS_AREA__8 = 'Домашний персонал';
const BUSINESS_AREA__9 = 'ЖКХ, эксплуатация';
const BUSINESS_AREA__10 = 'Искусство, развлечения';
const BUSINESS_AREA__11 = 'Консультирование';
const BUSINESS_AREA__PR = 'Маркетинг, реклама, PR';
const BUSINESS_AREA__13 = 'Медицина, фармацевтика';
const BUSINESS_AREA__14 = 'Образование, наука';
const BUSINESS_AREA__15 = 'Охрана, безопасность';
const BUSINESS_AREA__16 = 'Продажи';
const BUSINESS_AREA__17 = 'Производство, сырьё, с/х';
const BUSINESS_AREA__18 = 'Страхование';
const BUSINESS_AREA__19 = 'Строительство';
const BUSINESS_AREA__20 = 'Транспорт, логистика';
const BUSINESS_AREA__21 = 'Туризм, рестораны';
const BUSINESS_AREA__22 = 'Управление персоналом';
const BUSINESS_AREA__23 = 'Фитнес, салоны красоты';
const BUSINESS_AREA__24 = 'Юриспруденция';
const EDUCATION_ = 'Высшее';
const EDUCATION__1 = 'Незаконченное высшее';
const EDUCATION__2 = 'Среднее';
const EDUCATION__3 = 'Среднее специальное';
const MOVING_ = 'Невозможен';
const MOVING__1 = 'Возможен';
const POL_ = 'Мужской';
const POL__1 = 'Женский';
const RAZRESHENIE_NA_RABOTU_V_ROSSII_ = 'Да';
const RAZRESHENIE_NA_RABOTU_V_ROSSII__1 = 'Нет';
const SCHEDULE_ = 'Вахтовый метод';
const SCHEDULE__1 = 'Неполный день';
const SCHEDULE__2 = 'Полный день';
const SCHEDULE__3 = 'Свободный график';
const SCHEDULE__4 = 'Сменный график';
const SCHEDULE__5 = 'Удалённая работа';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAbilityToBusinessTripAllowableValues()
    {
        return [
            self::ABILITY_TO_BUSINESS_TRIP_,
self::ABILITY_TO_BUSINESS_TRIP__1,
self::ABILITY_TO_BUSINESS_TRIP__2,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBusinessAreaAllowableValues()
    {
        return [
            self::BUSINESS_AREA_IT_,
self::BUSINESS_AREA_,
self::BUSINESS_AREA__2,
self::BUSINESS_AREA__3,
self::BUSINESS_AREA__4,
self::BUSINESS_AREA__5,
self::BUSINESS_AREA__6,
self::BUSINESS_AREA__7,
self::BUSINESS_AREA__8,
self::BUSINESS_AREA__9,
self::BUSINESS_AREA__10,
self::BUSINESS_AREA__11,
self::BUSINESS_AREA__PR,
self::BUSINESS_AREA__13,
self::BUSINESS_AREA__14,
self::BUSINESS_AREA__15,
self::BUSINESS_AREA__16,
self::BUSINESS_AREA__17,
self::BUSINESS_AREA__18,
self::BUSINESS_AREA__19,
self::BUSINESS_AREA__20,
self::BUSINESS_AREA__21,
self::BUSINESS_AREA__22,
self::BUSINESS_AREA__23,
self::BUSINESS_AREA__24,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEducationAllowableValues()
    {
        return [
            self::EDUCATION_,
self::EDUCATION__1,
self::EDUCATION__2,
self::EDUCATION__3,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMovingAllowableValues()
    {
        return [
            self::MOVING_,
self::MOVING__1,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPolAllowableValues()
    {
        return [
            self::POL_,
self::POL__1,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRazreshenieNaRabotuVRossiiAllowableValues()
    {
        return [
            self::RAZRESHENIE_NA_RABOTU_V_ROSSII_,
self::RAZRESHENIE_NA_RABOTU_V_ROSSII__1,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getScheduleAllowableValues()
    {
        return [
            self::SCHEDULE_,
self::SCHEDULE__1,
self::SCHEDULE__2,
self::SCHEDULE__3,
self::SCHEDULE__4,
self::SCHEDULE__5,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ability_to_business_trip'] = isset($data['ability_to_business_trip']) ? $data['ability_to_business_trip'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['age'] = isset($data['age']) ? $data['age'] : null;
        $this->container['business_area'] = isset($data['business_area']) ? $data['business_area'] : null;
        $this->container['education'] = isset($data['education']) ? $data['education'] : null;
        $this->container['education_list'] = isset($data['education_list']) ? $data['education_list'] : null;
        $this->container['experience_list'] = isset($data['experience_list']) ? $data['experience_list'] : null;
        $this->container['language_list'] = isset($data['language_list']) ? $data['language_list'] : null;
        $this->container['moving'] = isset($data['moving']) ? $data['moving'] : null;
        $this->container['nationality'] = isset($data['nationality']) ? $data['nationality'] : null;
        $this->container['pol'] = isset($data['pol']) ? $data['pol'] : null;
        $this->container['razreshenie_na_rabotu_v_rossii'] = isset($data['razreshenie_na_rabotu_v_rossii']) ? $data['razreshenie_na_rabotu_v_rossii'] : null;
        $this->container['schedule'] = isset($data['schedule']) ? $data['schedule'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getAbilityToBusinessTripAllowableValues();
        if (!is_null($this->container['ability_to_business_trip']) && !in_array($this->container['ability_to_business_trip'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'ability_to_business_trip', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getBusinessAreaAllowableValues();
        if (!is_null($this->container['business_area']) && !in_array($this->container['business_area'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'business_area', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEducationAllowableValues();
        if (!is_null($this->container['education']) && !in_array($this->container['education'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'education', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMovingAllowableValues();
        if (!is_null($this->container['moving']) && !in_array($this->container['moving'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'moving', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPolAllowableValues();
        if (!is_null($this->container['pol']) && !in_array($this->container['pol'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'pol', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRazreshenieNaRabotuVRossiiAllowableValues();
        if (!is_null($this->container['razreshenie_na_rabotu_v_rossii']) && !in_array($this->container['razreshenie_na_rabotu_v_rossii'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'razreshenie_na_rabotu_v_rossii', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getScheduleAllowableValues();
        if (!is_null($this->container['schedule']) && !in_array($this->container['schedule'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'schedule', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ability_to_business_trip
     *
     * @return string
     */
    public function getAbilityToBusinessTrip()
    {
        return $this->container['ability_to_business_trip'];
    }

    /**
     * Sets ability_to_business_trip
     *
     * @param string $ability_to_business_trip Готовность к командировкам
     *
     * @return $this
     */
    public function setAbilityToBusinessTrip($ability_to_business_trip)
    {
        $allowedValues = $this->getAbilityToBusinessTripAllowableValues();
        if (!is_null($ability_to_business_trip) && !in_array($ability_to_business_trip, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'ability_to_business_trip', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ability_to_business_trip'] = $ability_to_business_trip;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string $address Место, рядом с которым вы хотите работать
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets age
     *
     * @return int
     */
    public function getAge()
    {
        return $this->container['age'];
    }

    /**
     * Sets age
     *
     * @param int $age Возраст соискателя
     *
     * @return $this
     */
    public function setAge($age)
    {
        $this->container['age'] = $age;

        return $this;
    }

    /**
     * Gets business_area
     *
     * @return string
     */
    public function getBusinessArea()
    {
        return $this->container['business_area'];
    }

    /**
     * Sets business_area
     *
     * @param string $business_area Сфера деятельности
     *
     * @return $this
     */
    public function setBusinessArea($business_area)
    {
        $allowedValues = $this->getBusinessAreaAllowableValues();
        if (!is_null($business_area) && !in_array($business_area, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'business_area', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['business_area'] = $business_area;

        return $this;
    }

    /**
     * Gets education
     *
     * @return string
     */
    public function getEducation()
    {
        return $this->container['education'];
    }

    /**
     * Sets education
     *
     * @param string $education Образование соискателя
     *
     * @return $this
     */
    public function setEducation($education)
    {
        $allowedValues = $this->getEducationAllowableValues();
        if (!is_null($education) && !in_array($education, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'education', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['education'] = $education;

        return $this;
    }

    /**
     * Gets education_list
     *
     * @return \Swagger\Client\Model\Resume20ParamsEducationList[]
     */
    public function getEducationList()
    {
        return $this->container['education_list'];
    }

    /**
     * Sets education_list
     *
     * @param \Swagger\Client\Model\Resume20ParamsEducationList[] $education_list education_list
     *
     * @return $this
     */
    public function setEducationList($education_list)
    {
        $this->container['education_list'] = $education_list;

        return $this;
    }

    /**
     * Gets experience_list
     *
     * @return \Swagger\Client\Model\Resume20ParamsExperienceList[]
     */
    public function getExperienceList()
    {
        return $this->container['experience_list'];
    }

    /**
     * Sets experience_list
     *
     * @param \Swagger\Client\Model\Resume20ParamsExperienceList[] $experience_list experience_list
     *
     * @return $this
     */
    public function setExperienceList($experience_list)
    {
        $this->container['experience_list'] = $experience_list;

        return $this;
    }

    /**
     * Gets language_list
     *
     * @return \Swagger\Client\Model\Resume20ParamsLanguageList[]
     */
    public function getLanguageList()
    {
        return $this->container['language_list'];
    }

    /**
     * Sets language_list
     *
     * @param \Swagger\Client\Model\Resume20ParamsLanguageList[] $language_list language_list
     *
     * @return $this
     */
    public function setLanguageList($language_list)
    {
        $this->container['language_list'] = $language_list;

        return $this;
    }

    /**
     * Gets moving
     *
     * @return string
     */
    public function getMoving()
    {
        return $this->container['moving'];
    }

    /**
     * Sets moving
     *
     * @param string $moving Возможность перезда
     *
     * @return $this
     */
    public function setMoving($moving)
    {
        $allowedValues = $this->getMovingAllowableValues();
        if (!is_null($moving) && !in_array($moving, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'moving', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['moving'] = $moving;

        return $this;
    }

    /**
     * Gets nationality
     *
     * @return string
     */
    public function getNationality()
    {
        return $this->container['nationality'];
    }

    /**
     * Sets nationality
     *
     * @param string $nationality Гражданство соискателя
     *
     * @return $this
     */
    public function setNationality($nationality)
    {
        $this->container['nationality'] = $nationality;

        return $this;
    }

    /**
     * Gets pol
     *
     * @return string
     */
    public function getPol()
    {
        return $this->container['pol'];
    }

    /**
     * Sets pol
     *
     * @param string $pol Пол соискателя
     *
     * @return $this
     */
    public function setPol($pol)
    {
        $allowedValues = $this->getPolAllowableValues();
        if (!is_null($pol) && !in_array($pol, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'pol', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['pol'] = $pol;

        return $this;
    }

    /**
     * Gets razreshenie_na_rabotu_v_rossii
     *
     * @return string
     */
    public function getRazreshenieNaRabotuVRossii()
    {
        return $this->container['razreshenie_na_rabotu_v_rossii'];
    }

    /**
     * Sets razreshenie_na_rabotu_v_rossii
     *
     * @param string $razreshenie_na_rabotu_v_rossii Наличие разрешения на работу в России
     *
     * @return $this
     */
    public function setRazreshenieNaRabotuVRossii($razreshenie_na_rabotu_v_rossii)
    {
        $allowedValues = $this->getRazreshenieNaRabotuVRossiiAllowableValues();
        if (!is_null($razreshenie_na_rabotu_v_rossii) && !in_array($razreshenie_na_rabotu_v_rossii, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'razreshenie_na_rabotu_v_rossii', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['razreshenie_na_rabotu_v_rossii'] = $razreshenie_na_rabotu_v_rossii;

        return $this;
    }

    /**
     * Gets schedule
     *
     * @return string
     */
    public function getSchedule()
    {
        return $this->container['schedule'];
    }

    /**
     * Sets schedule
     *
     * @param string $schedule Предпочтительный график работы
     *
     * @return $this
     */
    public function setSchedule($schedule)
    {
        $allowedValues = $this->getScheduleAllowableValues();
        if (!is_null($schedule) && !in_array($schedule, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'schedule', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['schedule'] = $schedule;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
