<?php
/**
 * NegotiationVacancyParams
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Авито API для бизнеса
 *
 * # Общая информация Описание API произведено в формате [**Swagger 3.0**](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md). Вы можете использовать данный файл для ознакомления с методами API, а также для генерации базового кода для работы с API на удобном для вас языке программирования с помощью утилиты [**Swagger Codegen**](https://swagger.io/swagger-codegen/) или online сервиса [**Swagger Editor**](https://editor.swagger.io/).  **Авито API для бизнеса предоставляется согласно [Условиям использования](https://api.avito.ru/docs/public/APITermsOfServiceV1.pdf).**  По всем вопросам работы с API необходимо обращаться в Службу Поддержки профессиональных инструментов:  <li>телефон: <b>+7 495 777-10-66</b></li> <li>email: <a href=\"mailto:supportautoload@avito.ru\">supportautoload@avito.ru</a></li>  # Типы авторизации Для использования данного API запрос должен быть авторизован. В данный момент API Авито использует следующие механизмы авторизации.  <!-- ReDoc-Inject: <security-definitions> -->  Подробнее о каждом механизме и его назначении можно прочитать в соответствующем разделе.
 *
 * OpenAPI spec version: 1
 * Contact: supportautoload@avito.ru
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.23
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * NegotiationVacancyParams Class Doc Comment
 *
 * @category Class
 * @description Блок с параметрами вакансии. Все поля опциональны и выводятся при наличии
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class NegotiationVacancyParams implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Negotiation_vacancy_params';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'address' => 'string',
'business_area' => 'string',
'experience' => 'string',
'schedule' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'address' => null,
'business_area' => null,
'experience' => null,
'schedule' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'address' => 'address',
'business_area' => 'business_area',
'experience' => 'experience',
'schedule' => 'schedule'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'address' => 'setAddress',
'business_area' => 'setBusinessArea',
'experience' => 'setExperience',
'schedule' => 'setSchedule'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'address' => 'getAddress',
'business_area' => 'getBusinessArea',
'experience' => 'getExperience',
'schedule' => 'getSchedule'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const BUSINESS_AREA_IT_ = 'IT, интернет, телеком';
const BUSINESS_AREA_ = 'Автомобильный бизнес';
const BUSINESS_AREA__2 = 'Административная работа';
const BUSINESS_AREA__3 = 'Банки, инвестиции';
const BUSINESS_AREA__4 = 'Без опыта, студенты';
const BUSINESS_AREA__5 = 'Бухгалтерия, финансы';
const BUSINESS_AREA__6 = 'Высший менеджмент';
const BUSINESS_AREA__7 = 'Госслужба, НКО';
const BUSINESS_AREA__8 = 'Домашний персонал';
const BUSINESS_AREA__9 = 'ЖКХ, эксплуатация';
const BUSINESS_AREA__10 = 'Искусство, развлечения';
const BUSINESS_AREA__11 = 'Консультирование';
const BUSINESS_AREA__PR = 'Маркетинг, реклама, PR';
const BUSINESS_AREA__13 = 'Медицина, фармацевтика';
const BUSINESS_AREA__14 = 'Образование, наука';
const BUSINESS_AREA__15 = 'Охрана, безопасность';
const BUSINESS_AREA__16 = 'Продажи';
const BUSINESS_AREA__17 = 'Производство, сырьё, с/х';
const BUSINESS_AREA__18 = 'Страхование';
const BUSINESS_AREA__19 = 'Строительство';
const BUSINESS_AREA__20 = 'Транспорт, логистика';
const BUSINESS_AREA__21 = 'Туризм, рестораны';
const BUSINESS_AREA__22 = 'Управление персоналом';
const BUSINESS_AREA__23 = 'Фитнес, салоны красоты';
const BUSINESS_AREA__24 = 'Юриспруденция';
const EXPERIENCE_ = 'Не имеет значения';
const EXPERIENCE__1 = 'Более 1 года';
const EXPERIENCE__3 = 'Более 3 лет';
const EXPERIENCE__5 = 'Более 5 лет';
const EXPERIENCE__10 = 'Более 10 лет';
const SCHEDULE_ = 'Вахтовый метод';
const SCHEDULE__1 = 'Неполный день';
const SCHEDULE__2 = 'Полный день';
const SCHEDULE__3 = 'Свободный график';
const SCHEDULE__4 = 'Сменный график';
const SCHEDULE__5 = 'Удалённая работа';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBusinessAreaAllowableValues()
    {
        return [
            self::BUSINESS_AREA_IT_,
self::BUSINESS_AREA_,
self::BUSINESS_AREA__2,
self::BUSINESS_AREA__3,
self::BUSINESS_AREA__4,
self::BUSINESS_AREA__5,
self::BUSINESS_AREA__6,
self::BUSINESS_AREA__7,
self::BUSINESS_AREA__8,
self::BUSINESS_AREA__9,
self::BUSINESS_AREA__10,
self::BUSINESS_AREA__11,
self::BUSINESS_AREA__PR,
self::BUSINESS_AREA__13,
self::BUSINESS_AREA__14,
self::BUSINESS_AREA__15,
self::BUSINESS_AREA__16,
self::BUSINESS_AREA__17,
self::BUSINESS_AREA__18,
self::BUSINESS_AREA__19,
self::BUSINESS_AREA__20,
self::BUSINESS_AREA__21,
self::BUSINESS_AREA__22,
self::BUSINESS_AREA__23,
self::BUSINESS_AREA__24,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getExperienceAllowableValues()
    {
        return [
            self::EXPERIENCE_,
self::EXPERIENCE__1,
self::EXPERIENCE__3,
self::EXPERIENCE__5,
self::EXPERIENCE__10,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getScheduleAllowableValues()
    {
        return [
            self::SCHEDULE_,
self::SCHEDULE__1,
self::SCHEDULE__2,
self::SCHEDULE__3,
self::SCHEDULE__4,
self::SCHEDULE__5,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['business_area'] = isset($data['business_area']) ? $data['business_area'] : null;
        $this->container['experience'] = isset($data['experience']) ? $data['experience'] : null;
        $this->container['schedule'] = isset($data['schedule']) ? $data['schedule'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getBusinessAreaAllowableValues();
        if (!is_null($this->container['business_area']) && !in_array($this->container['business_area'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'business_area', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getExperienceAllowableValues();
        if (!is_null($this->container['experience']) && !in_array($this->container['experience'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'experience', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getScheduleAllowableValues();
        if (!is_null($this->container['schedule']) && !in_array($this->container['schedule'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'schedule', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets address
     *
     * @return string
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string $address Место работы
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets business_area
     *
     * @return string
     */
    public function getBusinessArea()
    {
        return $this->container['business_area'];
    }

    /**
     * Sets business_area
     *
     * @param string $business_area Сфера деятельности
     *
     * @return $this
     */
    public function setBusinessArea($business_area)
    {
        $allowedValues = $this->getBusinessAreaAllowableValues();
        if (!is_null($business_area) && !in_array($business_area, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'business_area', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['business_area'] = $business_area;

        return $this;
    }

    /**
     * Gets experience
     *
     * @return string
     */
    public function getExperience()
    {
        return $this->container['experience'];
    }

    /**
     * Sets experience
     *
     * @param string $experience Требуемый опыт работы
     *
     * @return $this
     */
    public function setExperience($experience)
    {
        $allowedValues = $this->getExperienceAllowableValues();
        if (!is_null($experience) && !in_array($experience, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'experience', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['experience'] = $experience;

        return $this;
    }

    /**
     * Gets schedule
     *
     * @return string
     */
    public function getSchedule()
    {
        return $this->container['schedule'];
    }

    /**
     * Sets schedule
     *
     * @param string $schedule График работы
     *
     * @return $this
     */
    public function setSchedule($schedule)
    {
        $allowedValues = $this->getScheduleAllowableValues();
        if (!is_null($schedule) && !in_array($schedule, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'schedule', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['schedule'] = $schedule;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
